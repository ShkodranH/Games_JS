import { questionData } from './data.js'

const startBtn = document.querySelector('.start-btn');
const timeElem = document.querySelector('.time');
const questionNumElem = document.querySelector('.question-number');
const scoreElem = document.querySelector('.score');
const questionElem = document.querySelector('.question');
const optionsElem = document.querySelectorAll('.options button');
const messageElem = document.querySelector('.message');
const finalScoreElem = document.querySelector('.final-score');
const finishBtn = document.querySelector('.finish-btn');
const infoBtn = document.querySelector('.info-btn');
const closeInfoBtn = document.querySelector('.close-info-btn');
const settingsBtn = document.querySelector('.settings-btn');
const closeSettingsBtn = document.querySelector('.close-settings-btn');
let levelSelected;

let timeCount;
let timer = 15;
let numOfQuestions = 10;
let score = 0;
let questionNum = 1;
let question;
let options = new Array(4);
let answer;
const message = {
    win: "You Win!",
    lose: "You Lose!",
};

const clickAudio = new Audio("./sound-effects/click.mp3");
const winAudio = new Audio("./sound-effects/win.wav");
const loseAudio = new Audio("./sound-effects/lose.wav");

// Check which level of difficulty has player selected
function difficulty() {
    levelSelected = document.querySelector('.settings input:checked');
    numOfQuestions = levelSelected.dataset.question;
    timer = levelSelected.dataset.time;
}
// Genereta options for a question including the right answer
// Options have been generated by adding or subtracting a random small number from the answer
function generateOptions(answer) {
    let randomNumbers = Array.from({ length: 11 }, (_, i) => i - 5);
    randomNumbers = randomNumbers.filter(e => e !== 0);
    randomNumbers.sort(() => Math.random() - 0.5);

    options.fill(answer);
    for(let i = 1; i < 4; i++)
        options[i] += randomNumbers[i];
    options.sort(() => Math.random() - 0.5);

    this.answer = answer;
}
// Generating a question from random numbers and operator
// Formating numbers for different operators in order to make calculation more easy
function generateQuestion() {
    let operator = Math.floor(Math.random() * 4);
    let firstNumber = Math.ceil(Math.random() * 100);
    let secondNumber = Math.ceil(Math.random() * 100);

    switch(operator) {
        case 0:
            question = firstNumber + " + " + secondNumber;
            generateOptions(firstNumber + secondNumber);
            break;
        case 1:
            if(firstNumber < secondNumber)
                [firstNumber, secondNumber] = [secondNumber, firstNumber];
            question = firstNumber + " - " + secondNumber;
            generateOptions(firstNumber - secondNumber);
            break;
        case 2:
            firstNumber %= 15;
            secondNumber %= 15;
            question = ++firstNumber + " x " + ++secondNumber;
            generateOptions(firstNumber * secondNumber);
            break;
        case 3:
            if(firstNumber < secondNumber)
                [firstNumber, secondNumber] = [secondNumber, firstNumber];
            firstNumber -= firstNumber % secondNumber;
            question = firstNumber + " รท " + secondNumber;
            generateOptions(firstNumber / secondNumber);
            break;
    }
}
function displayQuestion() {
    generateQuestion();
    questionElem.innerHTML = question;
    for(let i = 0; i < 4; i++) {
        optionsElem[i].innerHTML = options[i];
    }
}

function changeScene(prev, next) {
    clickAudio.play();
    document.querySelector(prev).style.display = 'none';
    document.querySelector(next).style.display = 'flex';
}

function questionNumber() {
    questionNum++;
    questionNumElem.innerHTML = questionNum;
}
function scoreBonus() {
    score += timer * levelSelected.dataset.bonus;
    scoreElem.innerHTML = "Score: " + score;
}
function resetTime() {
    timer = levelSelected.dataset.time;
    timeElem.innerHTML = "Time: " + timer + "s";
}

function nextQuestion() {
    displayQuestion();
    questionNumber();
    scoreBonus();
    resetTime();
}
// Start timer and check if time has run out for a question
function timeCounter() {
    timeCount = setInterval(() => {
        if(timer === 0) {
            gameEnd(message.lose);
            loseAudio.play();
        }
        timer--;
        timeElem.innerHTML = "Time: " + timer + "s";
    }, 1000);
}
function gameEnd(message) {
    changeScene('.stage', '.finish');
    finalScoreElem.innerHTML = "Score: " + score;
    messageElem.innerHTML = message;
    clearInterval(timeCount);
}
// Check if player answered correctly and if he finished all the questions
function checkAnswer(answer) {
    if(answer == this.answer) {
        nextQuestion();
    }
    else {
        gameEnd(message.lose);
        loseAudio.play();
    }
    if(questionNum > numOfQuestions) {
        gameEnd(message.win);
        winAudio.play();
    }
}

startBtn.addEventListener('click', () => {
    changeScene('.intro', '.stage');
    difficulty();
    displayQuestion();
    timeCounter();
    timeElem.innerHTML = "Time: " + timer + "s";
    questionNumElem.innerHTML = questionNum;
    scoreElem.innerHTML = "Score: " + score;
});
optionsElem.forEach(elem => {
    elem.addEventListener('click', (e) => {
        checkAnswer(e.target.innerHTML);
        clickAudio.play();
    });
});
finishBtn.addEventListener('click', () => {
    changeScene('.finish', '.intro');
    timer = levelSelected.dataset.time;
    score = 0;
    questionNum = 1;
});
infoBtn.addEventListener('click', () => {
    changeScene('.intro', '.info');
});
closeInfoBtn.addEventListener('click', () => {
    changeScene('.info', '.intro');
});
settingsBtn.addEventListener('click', () => {
    changeScene('.intro', '.settings');
});
closeSettingsBtn.addEventListener('click', () => {
    changeScene('.settings', '.intro');
});